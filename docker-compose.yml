services:
  minipg:
    image: postgres:alpine
    container_name: minipg
    environment:
      - POSTGRES_PASSWORD=minipg
      - POSTGRES_USER=minipg
      - POSTGRES_DB=minipg
    expose:
      - 5432
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U minipg"]
      interval: 5s
      retries: 3
      timeout: 10s

  server1:
    image: miniserver
    container_name: mini1
    expose:
      - 8001
    environment:
      - PORT=8001
      - DB_HOST=minipg
      - DB_USER=minipg
      - DB_PASSWORD=minipg
      - DB_NAME=minipg
    networks:
      - backend
    depends_on:
      minipg:
        condition: service_healthy

  server2:
    image: miniserver
    container_name: mini2
    expose:
      - 8002
    environment:
      - PORT=8002
      - DB_HOST=minipg
      - DB_USER=minipg
      - DB_PASSWORD=minipg
      - DB_NAME=minipg
    networks:
      - backend
    depends_on:
      minipg:
        condition: service_healthy

  server3:
    image: miniserver
    container_name: mini3
    expose:
      - 8003
    environment:
      - PORT=8003
      - DB_HOST=minipg
      - DB_USER=minipg
      - DB_PASSWORD=minipg
      - DB_NAME=minipg
    networks:
      - backend
    depends_on:
      minipg:
        condition: service_healthy

  nginx:
    image: nginx:alpine
    container_name: mininginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - server1
      - server2
      - server3
    networks:
      - backend

networks:
  backend:
    driver: bridge