services:
  postgres:
    image: postgres:alpine
    container_name: minipg
    environment:
      POSTGRES_PASSWORD: mypass
    ports:
      - "8999:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5
      timeout: 10s

  server1:
    image: miniserver
    container_name: mini1
    ports:
      - "8001:8001"
    environment:
      - PORT=8001
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=mypass
      - DB_NAME=postgres
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy

  server2:
    image: miniserver
    container_name: mini2
    ports:
      - "8002:8002"
    environment:
      - PORT=8002
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=mypass
      - DB_NAME=postgres
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy

  server3:
    image: miniserver
    container_name: mini3
    ports:
      - "8003:8003"
    environment:
      - PORT=8003
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=mypass
      - DB_NAME=postgres
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy

  nginx:
    image: nginx:alpine
    container_name: mininginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - server1
      - server2
      - server3
    networks:
      - backend

networks:
  backend:
    driver: bridge